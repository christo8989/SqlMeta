<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)packages\SqlMeta.1.0.5847.37675\lib\SqlMeta.dll" 
#><#@ assembly name="$(SolutionDir)packages\Dapper.1.42\lib\net45\Dapper.dll" 
#>
<#@ import namespace="SqlMeta.Data.Repositories" #>
<#@ import namespace="SqlMeta.Data.Types" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@include file="Manager.tt"#>
<# var manager = Manager.Create(Host, GenerationEnvironment); #>
<#@ output extension=".cs" #>
<#var extention = "cs";#>


<# 
    var dataRepo = new MetaRepository(manager.ConnectionString);
    var tables = dataRepo.GetTableInfo().Where(t=>!t.TableName.Contains("diagram")).ToList();
    var nameSpace = "Werky.SqlMetaAccess";

foreach (var table in tables)
{
    var className = String.Format("{0}Validator", table.TableName);
    manager.StartNewFile(String.Format("{0}.{1}",className,extention));
#>

using FluentValidation;
using Werky.Core.SqlMetaAccess;

namespace <#=nameSpace#>
{
	public partial class <#=className#> : AbstractValidator<<#=table.TableName#>>
	{
		public <#=className#>()
		{
		<# foreach (SqlMeta.Data.Types.SqlColumnInfo column in table.Columns)
		{#>
		RuleFor(obj=>obj.<#=column.ColumnName#>)<#=this.GetRulesForColumn(column)#>;
	<#}#>
}
}		
}
<# manager.EndBlock(); #>

<#
}
#>

<# manager.Process(true); #>

<#+
    internal string GetRulesForColumn(SqlColumnInfo column)
    {
		var sb = new StringBuilder();
		
        sb.Append(this.GetNotEmptyValidator(column));
        sb.Append(this.GetLengthValidator(column));

        return sb.ToString();
    }

    internal string GetNotEmptyValidator(SqlColumnInfo column)
    {
        var result = string.Empty;
        //var csType = Manager.GetCSharpTypeFromSqlType(column.DataType, column.IsNullable);
        if (column.IsNullable == false)
        {
            result = ".NotEmpty()";
        }

        return result;
    }

    internal string GetLengthValidator(SqlColumnInfo column)
    {
        var result = string.Empty;
		var csType = Manager.GetCSharpTypeFromSqlType(column.DataType, column.IsNullable);
        var min = column.IsNullable ? "0" : "1";
        
        if (csType == "string")
        {
            result = String.Format(".Length(min:{0},max:{1})",min, column.CharacterMaxLength);
            
        }

		if (column.IsNullable && !String.IsNullOrWhiteSpace(result))
        {
            var whenNotNull = String.Format(".When(obj => obj.{0} != null)",column.ColumnName);
            result += whenNotNull;
        }
        return result;
    }
#>