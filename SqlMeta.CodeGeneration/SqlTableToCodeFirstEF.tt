<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)packages\SqlMeta.1.0.5847.37675\lib\SqlMeta.dll" 
#><#@ assembly name="$(SolutionDir)packages\Dapper.1.42\lib\net45\Dapper.dll" 
#>
<#@ import namespace="SqlMeta.Data.Repositories" #>
<#@ import namespace="SqlMeta.Data.Types" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@include file="Manager.tt"#>
<# var manager = Manager.Create(Host, GenerationEnvironment); #>
<#@ output extension=".cs" #>
<#var extention = "cs";#>


<# 
    var dataRepo = new MetaRepository(manager.ConnectionString);
    var tables = dataRepo.GetTableInfo();//.Where(t => !t.TableName.Contains("sysdiagram")).ToList();
    var nameSpace = "BPM.Queuing.Core.Data";

foreach (var table in tables)
{
    var strippedTableName = StripTableName(table.TableName);
    manager.StartNewFile(String.Format("{0}.{1}", strippedTableName, extention));

#>
namespace <#=nameSpace#>
{
	using System;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;

	[Table("<#=table.TableName#>",Schema = "<#=table.Columns[0].Schema#>")]
	public partial class <#=strippedTableName#>
	{

	<# foreach (SqlMeta.Data.Types.SqlColumnInfo column in table.Columns /*.OrderBy(c=>c.IsIdentity).ThenBy(c=>c.IsPrimaryKey).ThenBy(c=>c.ColumnName)*/)
	{#>
	<#=RenderAttributes(column)#>
	public <#=Manager.GetCSharpTypeFromSqlType(sqlType:column.DataType,isNullable:column.IsNullable)#> <#=column.ColumnName#> {get;set;}
	<#}#>
}
}
	
<# manager.EndBlock(); #>

<#
}
#>

<# manager.Process(true); #>

<#+

    public static string StripTableName(string input)
    {
        return input.Replace("tbl", string.Empty);
    }

    public static string RenderAttributes(SqlColumnInfo columnInfo)
    {
        var sb = new StringBuilder();

		//Key
        sb.Append(columnInfo.IsPrimaryKey ? "\n[Key]" : string.Empty);

		//Required
        sb.Append(columnInfo.IsNullable ? string.Empty : "\n[Required]");

		//String Max
        sb.Append(
		Manager.GetCSharpTypeFromSqlType(sqlType: columnInfo.DataType, isNullable: columnInfo.IsNullable) ==
                  "string"
            ? String.Format("\n[StringLength({0})]",columnInfo.CharacterMaxLength)
            : string.Empty);

		//Column
        sb.Append(String.Format("\n[Column(\"{0}\")]", columnInfo.ColumnName));

        return sb.ToString();
    }

    public static string BuildColumnAttr(SqlTableInfo tableInfo)
    {
        var sb = new StringBuilder();


        return sb.ToString();
    }
#>